What is the difference between frontend and backend development?

Frontend development:
Refers to the process of creating the user interface and user experience of a website or web application. 
It involves building the client-side of the application, which is responsible for rendering the content and interacting with users directly.

Backend development:
Focuses on the server-side of the application. 
It involves handling the business logic, data storage, and processing, and communication with external services. 





How is dynamic webpage content generated?

Dynamic webpage content is generated by executing server-side code to fetch data, perform calculations, or manipulate information.
Server-side technologies like Node.js, PHP, or Python are used to generate dynamic content.



What steps happen when a client makes a request to a server?

When a client makes a request to a server, the following steps typically occur:

    The client sends a request to a specific URL, specifying the HTTP method (e.g., GET, POST).
    
    The request is received by the server.
    
    The server processes the request, which may involve accessing a database or executing server-side code.
    
    The server generates a response with the requested data or performs the desired action.
    
    The server sends the response back to the client.
    
    The client receives the response and processes it, which may involve rendering the webpage or executing JavaScript code.



What is a framework?

A framework is a pre-written set of code and tools that provides a foundation for building applications.
Frameworks offer reusable components, libraries, and structures to simplify development and promote best practices.



Describe some popular frameworks

Some popular frameworks for web development include:
Express.js: A lightweight and flexible Node.js framework for building web applications and APIs.
React.js: A JavaScript library for building user interfaces, often used in single-page applications.
Angular: A TypeScript-based framework for building large-scale applications with a complete MVC architecture.
Django: A Python framework that follows the model-view-controller (MVC) pattern for building robust web applications.
Ruby on Rails: A web application framework written in Ruby that emphasizes simplicity and convention over configuration.



What is Node.js?

Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine.
It allows running JavaScript code on the server-side, enabling backend development using JavaScript.



What is the event loop

The event loop is a core concept in Node.js that handles asynchronous operations and event-driven programming.
It allows Node.js to perform non-blocking I/O operations efficiently, without blocking the execution of other code.




.env files

.env files are configuration files commonly used in Node.js applications.
They store environment variables, such as database credentials or API keys, in a key-value format.



HTTP module

The HTTP module is a built-in Node.js module that provides functionality for creating HTTP servers and making HTTP requests.
It allows handling incoming HTTP requests, accessing request and response headers, and managing server-side logic.



fs module

The fs module is a built-in Node.js module that provides file system-related functionality.
It allows reading from and writing to files, creating directories, deleting files, and performing other file system operations.



URL class

The URL class is a built-in module in Node.js for parsing and manipulating URLs.
It provides methods for working with URLs, such as extracting different components or appending query parameters.



NPM

NPM is the default package manager for Node.js and is used to manage external dependencies and modules.
It provides a vast ecosystem of open-source packages that can be easily installed, updated, and used in Node.js projects.




Events

Events are a fundamental part of Node.js and are used for handling asynchronous actions and communication between different parts of an application.
The EventEmitter class in Node.js enables the creation and handling of custom events, allowing developers to write event-driven code.



Debugging Node, Any useful takeaways you can find

Yeah, that in Visual Studio Code there's the terminal section that lets you use powershell while in VS Code.
I completely forgot this was in VS Code. 

Another one I found was the problems tab.

You can click on one of the listed problems and it'll take you to where the problem is.
This is probably super duper useful when you have multiple tabs of code and each has lots of code amongst them. 